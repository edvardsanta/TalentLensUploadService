version: '3.4'

services:
  uploadfiles:
    image: ${DOCKER_REGISTRY-}uploadfiles
    build:
      context: .
      dockerfile: Application/UploadFiles/Dockerfile
    ports:
      - 5000:8080

  textconsumer:
    image: ${DOCKER_REGISTRY-}textconsumer
    build:
      context: .
      dockerfile: TextConsumer/Dockerfile

  ranktext:
    image: ${DOCKER_REGISTRY-}ranktext
    build:
      context: .
      dockerfile: RankText/Dockerfile

  postgres:
    image: postgres:17.2
    restart: on-failure
    container_name: postgres
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  paradedb:
    image: paradedb/paradedb:0.15.0-pg17
    container_name: paradedb
    restart: on-failure
    ports:
      - 10000:5432
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:3.12.9-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  postgres_data:
  rabbitmq_data: